<?php
/**
 * @file
 * Hooks for feature map module
 */


/*
 * TODO :
 *
 * - cleanup of map_coordinates table
 * 
 */



module_load_include('inc', 'feature_map', 'includes/feature_map.helpers');
module_load_include('inc', 'feature_map', 'includes/feature_map.variable');
module_load_include('inc', 'feature_map', 'theme/feature_map.theme');

/*
 * Implements hook_permission
 */
function feature_map_permission(){
    return array(
    'administer map' => array(
      'title' => t('Administer map'), 
      'description' => t('Set map settings.'),
    ),
  );
}

/*  
 * Implements hook_menu().
 */
function feature_map_menu() {
  
  $items['ajax/locator'] = array(
    'page callback' => 'feature_map_locator_json', 
    'access arguments' => array('access content'), 
    'file' => 'includes/feature_map.ajax.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['map'] = array(
    'title' => t('Map'),
    'page callback' => 'feature_map_page', 
    'access arguments' => array('access content'), 
    'file' => 'includes/feature_map.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/map'] = array(
    'title' => t('Map settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_module_form','feature_map'),
    'access arguments' => array('administer map'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/map/settings'] = array(
    'title' => t('Map settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_module_form','feature_map'),
    'access arguments' => array('administer map'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['ajax/map/%'] = array(
    'page callback' => 'feature_map_ajax',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'file' => 'includes/feature_map.ajax.inc',
    'type' => MENU_CALLBACK,
  );
  
  $types = array_filter(variable_get_value('map_entity_type'));
  if(count($types)) {
    foreach($types as $type){
         $items['admin/config/map/'.$type] = array(
          'title' => t('Mapping: @type', array('@type' => $type)),
          'page callback' => 'drupal_get_form',
          'page arguments' => array('map_entity_mapping_form', 3),
          'access arguments' => array('administer map'),
          'type' => MENU_LOCAL_TASK,
          'file' => 'includes/feature_map.forms.inc',
     );
    }
  }
  return (array)$items; 
}
/**
 * Implementing hook_entity_insert
 * Identical function to hook_entity_update, which is not triggered with new entities
 */
function feature_map_entity_insert($entity, $type) {
  $mapped_entities = array_filter(variable_get_value('map_entity_type'));
  if(in_array($entity->type, $mapped_entities)) {
    $mapped_fields = variable_get_value($entity->type .'_mapping');
    foreach((array)$mapped_fields as $key => $field) {
      $data = field_get_items('node', $entity, $field);
      (array)$address[] = $data[0]['value'];
    }
    
  isset($address) ? retrieve_map_coordinates($address, $entity) :'';
  }
}


/**
 *  Implementing hook_entity_update
 */
function feature_map_entity_update($entity, $type) {
  // check if fetching coordinates is necessary..
  $fetch_grid = FALSE;
  $mapped_entities = array_filter(variable_get_value('map_entity_type'));
  if(in_array($entity->type, $mapped_entities)) {
    $mapped_fields = variable_get_value($entity->type .'_mapping');
      foreach((array)$mapped_fields as $key => $field) {
      // check to see if mapped field values have changed.
        $data = field_get_items('node', $entity, $field);
        if(!$entity->is_new){
          $original = field_get_items('node', $entity->original, $field);
          $fetch_grid = $original[0]['value'] <> $data[0]['value'] ? TRUE :'';
        }
        (array)$address[] = $data[0]['value'];
        
      }
    // and retrieve coordinates if it is
    if($fetch_grid){
      retrieve_map_coordinates($address, $entity);
    }
  }
}

/*
 * Implementing hook_form_alter
 */
function feature_map_form_alter(&$form, &$form_state, $form_id){
  switch($form_id) {
    case 'variable_module_form':
      $form['#submit'][] = 'feature_map_rebuild_menu';
      break;
  }
  $mapped_entities = array_filter(variable_get_value('map_entity_type'));
  foreach($mapped_entities as $entity) {
    // add a map preview to the node edit form
    if($form_id == $entity . '_node_form') {
      $nid = $form['nid']['#value'];
      $form['location'] = array(
        '#type' => 'fieldset',
        '#title' => 'Location',
        '#prefix' => '<div id="gmap-preview">',
        '#suffix' => '</div>',
        '#weight' => 100,
      );
      if(!is_null($nid)){
        $coord = db_query('SELECT lat, lon FROM {map_coordinates} WHERE entity_id = ' . $nid)->fetchAll();
        if($coord){
          $lat = $coord[0]->lat;
          $lon = $coord[0]->lon;
          $form['location']['lat'] = array(
            '#type' => 'textfield',
            '#title' => 'Latitude',
            '#default_value' => $lat,
            '#prefix' => '<div class="coordinates">',
          );
          $form['location']['lon'] = array(
            '#type' => 'textfield',
            '#title' => 'Longitude',
            '#default_value' => $lon,
            '#suffix' => '</div>',
          );

          $form['location']['map'] = array(
            '#markup' => feature_map_entity_preview($lat, $lon),
          );
        }
        $entity = $form['#entity'];
        $mapped_fields = variable_get_value($entity->type .'_mapping');
        $addresscomponents = array();
        foreach((array)$mapped_fields as $field) {
          $value = field_get_items('node', $entity, $field);
          $addresscomponents[] = strtolower($value[0]['value']);
        }
        $address = implode(',', $addresscomponents);
        // url needs to match with the one in map_fetch_grid() (Helpers)
        $url = "http://maps.googleapis.com/maps/api/geocode/json?address=";
        $url .= $address;
        $url .= "&sensor=false";
        $form['location']['gmap-link'] = array(
          '#markup' => l('Check on Google Maps', $url),
        );
      }
    }
  }

}


//replace with theme function? 
function feature_map_entity_preview($lat, $lon) {
  add_map_basics();
  drupal_add_js(array(
    'featureMap' => array(
        'lat' => $lat,
        'lng' => $lon,
    )
  ), 'setting');
  
  $out = '<div id="preview">';
  $out .= '<div id="gmap">Loading map...</div>';
  $out .= '</div>';
  return $out;
}

