<?php
/**
 * @file
 * Hooks for feature map module
 */


/*
 * TODO :
 *
 * - cleanup of map_coordinates table on cron
 * 
 */



module_load_include('inc', 'feature_map', 'includes/feature_map.helpers');
module_load_include('inc', 'feature_map', 'includes/feature_map.variable');
module_load_include('inc', 'feature_map', 'theme/feature_map.theme');

/*
 * Implements hook_permission
 */
function feature_map_permission(){
    return array(
    'administer map' => array(
      'title' => t('Administer map'), 
      'description' => t('Configure maps & location settings.'),
    ),
  );
}

/*  
 * Implements hook_menu().
 */
function feature_map_menu() {
  
  $items['ajax/locator'] = array(
    'page callback' => 'feature_map_locator_json', 
    'access arguments' => array('access content'), 
    'file' => 'includes/feature_map.ajax.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['map'] = array(
    'page callback' => 'feature_map_page', 
    'access arguments' => array('access content'), 
    'file' => 'includes/feature_map.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['node/%/location'] = array(
    'title' => t('Location'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feature_map_node_settings', 1),
    'access arguments' => array('administer map'), 
    'file' => 'includes/feature_map.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/map'] = array(
    'title' => t('Map settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_module_form','feature_map'),
    'access arguments' => array('administer map'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/map/settings'] = array(
    'title' => t('Map settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_module_form','feature_map'),
    'access arguments' => array('administer map'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $types = array_filter(variable_get_value('map_entity_type'));
  if(count($types)) {
    foreach($types as $type){
         $items['admin/config/map/'.$type] = array(
          'title' => t('Mapping: @type', array('@type' => $type)),
          'page callback' => 'drupal_get_form',
          'page arguments' => array('map_entity_mapping_form', 3),
          'access arguments' => array('administer map'),
          'type' => MENU_LOCAL_TASK,
          'file' => 'includes/feature_map.forms.inc',
     );
    }
  }
  return (array)$items; 
}
/**
 * Implementing hook_entity_insert
 * Identical function to hook_entity_update, which is not triggered with new entities
 */
function feature_map_entity_insert($entity, $type) {
  $mapped_entities = array_filter(variable_get_value('map_entity_type'));
  if(in_array($entity->type, $mapped_entities)) {
    $mapped_fields = variable_get_value($entity->type .'_mapping');
    foreach((array)$mapped_fields as $key => $field) {
      $data = field_get_items('node', $entity, $field);
      (array)$address[] = $data[0]['value'];
    }
    
  isset($address) ? retrieve_map_coordinates($address, $entity) :'';
  }
}

/**
 * Implementing hook_entity_delete
 * Identical function to hook_entity_update, which is not triggered with new entities
 */
function feature_map_entity_delete($entity, $type) {
  $mapped_entities = array_filter(variable_get_value('map_entity_type'));
  if(in_array($entity->type, $mapped_entities)) {
    dpm($entity, 'add code to entity_delete');
    // delete from map_coordinates
//    db_delete('map_coordinates')
//      ->condition('entity_id', $entity_id)
//      ->condition('bundle', $entity_type)
//      ->execute();

  }
}

/**
 *  Implementing hook_entity_update
 */
function feature_map_entity_update($entity, $type) {
  // check if fetching coordinates is necessary..
  $fetch_grid = FALSE;
  $mapped_entities = array_filter(variable_get_value('map_entity_type'));
  if(in_array($entity->type, $mapped_entities)) {
    $mapped_fields = variable_get_value($entity->type .'_mapping');
      foreach((array)$mapped_fields as $key => $field) {
      // check to see if mapped field values have changed.
        $data = field_get_items('node', $entity, $field);
        if(!$entity->is_new){
          $original = field_get_items('node', $entity->original, $field);
          $fetch_grid = $original[0]['value'] <> $data[0]['value'] ? TRUE :'';
        }
        (array)$address[] = $data[0]['value'];
        
      }
    // and retrieve coordinates if it is
    if($fetch_grid){
      retrieve_map_coordinates($address, $entity);
    }
  }
}

/*
 * Implementing hook_form_alter
 */
function feature_map_form_alter(&$form, &$form_state, $form_id){
  switch($form_id) {
    case 'variable_module_form':
      $form['#submit'][] = 'feature_map_rebuild_menu';
      break;
  }
}


/*
 * Implements hook_admin_paths
 */
function feature_map_admin_paths() {
  $paths = array(
    'node/*/location' => TRUE, 
  );
  return $paths;
}